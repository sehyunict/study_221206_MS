<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="mybatis.main">

	<resultMap type="MainRankVo" id="rankList">
		<result column="music_no" property="music_no"/>
		<result column="music_title" property="music_title"/>
		<result column="artist_name" property="artist_name"/>
		<result column="album_title" property="album_title"/>
		<result column="music_like" property="music_like"/>
		<result column="member_like" property="member_like"/>
	</resultMap>
	
	<resultMap type="MainPlayListVo" id="playList">
		<result column="now_playList_no" property="now_playList_no"/>
		<result column="music_no" property="music_no"/>
		<result column="music_title" property="music_title"/>
		<result column="artist_name" property="artist_name"/>
		<result column="now_playList_count" property="now_playList_count"/>
		<result column="now_playList_date" property="now_playList_date"/>
	</resultMap>
  	
  	<resultMap type="MainPlayCountVo" id="playCount">
		<result column="music_no" property="music_no"/>
		<result column="rank_count" property="rank_count"/>
	</resultMap>
  	
	<select id="selectRankList" resultMap="rankList" parameterType="int" >
		<![CDATA[
			SELECT
			    T1.music_no
			  , T1.music_title
			  , (SELECT artist_name
			    FROM TN_MS_ARTIST
			    WHERE T1.artist_no = artist_no) artist_name
			  , (SELECT album_title
			    FROM TN_MS_ALBUM
			    WHERE T1.album_no = album_no) album_title
			  , T1.music_like
			  , DECODE(T2.music_no, NULL, 0, 1) member_like 
			  , T1.artist_no
			  , T1.album_no
			FROM
			    (SELECT
			        ROWNUM
			      , music_no
			      , music_title
			      , artist_no
			      , album_no
			      , music_like
			    FROM TN_MS_MUSIC
			    ORDER BY
			        music_like DESC
			      , music_no) T1
			  , (SELECT music_no
			    FROM TN_MS_LIKE_MUSIC
			    WHERE member_no = #{memberNo}) T2
			WHERE
			    T1.music_no = T2.music_no(+)
			  AND ROWNUM <= 50
	    ]]>
	</select>
	
	<select id="selectPlayList" parameterType="int" resultMap="playList">
		SELECT
		    T1.now_playList_no
		  , T1.music_no
		  , T3.music_title
		  , (SELECT artist_name
		    FROM TN_MS_ARTIST
		    WHERE T3.artist_no = artist_no) artist_name
		  , T1.now_playList_count
		  , T1.now_playList_date
		  , T3.artist_no
		FROM
		    TN_MS_NOW_PLAYLIST T1
		  , TN_MS_MEMBER T2
		  , TN_MS_MUSIC T3
		WHERE
		    T1.member_no = T2.member_no
		  AND T1.music_no = T3.music_no
		  AND T2.member_no = #{memberNo}
		ORDER BY
			T1.now_playList_no DESC
	</select>
	
	<insert id="insertPlayList" parameterType="hashMap">
		INSERT
		INTO TN_MS_NOW_PLAYLIST
		    (NOW_PLAYLIST_NO
		  , MEMBER_NO
		  , MUSIC_NO
		  , NOW_PLAYLIST_COUNT
		  , NOW_PLAYLIST_DATE)
		SELECT
		    SEQ_MS_NOW_PLAYLIST.NEXTVAL
		  , T1.*
		FROM(
		<foreach collection="list" item="item" separator="UNION ALL ">
			SELECT
		        #{item.memberNo} MEMBER_NO
		      , #{item.musicNo} MUSIC_NO
		      , 0 NOW_PLAYLIST_COUNT
		      , SYSDATE NOW_PLAYLIST_DATE
		    FROM DUAL
		</foreach>
		) T1
	</insert>
	
	<select id="selectInsertPlayList" parameterType="hashMap" resultMap="playList">
		<![CDATA[
			SELECT
			    T1.now_playList_no
			  , T1.music_no
			  , T3.music_title
			  , (SELECT artist_name
			    FROM TN_MS_ARTIST
			    WHERE T3.artist_no = artist_no) artist_name
			  , T1.now_playList_count
			  , T1.now_playList_date
			FROM
			    TN_MS_NOW_PLAYLIST T1
			  , TN_MS_MEMBER T2
			  , TN_MS_MUSIC T3
			  , (SELECT
			        ROW_NUMBER() OVER(ORDER BY now_playList_no DESC) RN
			      , now_playList_no
			    FROM TN_MS_NOW_PLAYLIST
			    WHERE member_no = #{memberNo}
			    ORDER BY now_playList_no DESC) T4
			WHERE
			    T1.member_no = T2.member_no
			  AND T1.music_no = T3.music_no
			  AND T1.now_playList_no = T4.now_playList_no
			  AND T4.RN <= #{insertSize}
			ORDER BY T1.now_playList_no
	    ]]>
	</select>
	
	<delete id="deletePlayList" parameterType="int">
		DELETE
		FROM TN_MS_NOW_PLAYLIST
		WHERE now_playList_no = #{musicNo}
	</delete>
	
	<insert id="insertLike" parameterType="hashMap">
		INSERT
		INTO TN_MS_LIKE_MUSIC
		VALUES(
		    SEQ_MS_LIKE_MUSIC.NEXTVAL
		  , #{memberNo}
		  , #{musicNo}
		  , SYSDATE)
	</insert>
	
	<delete id="deleteLike" parameterType="hashMap">
		DELETE
		FROM TN_MS_LIKE_MUSIC
		WHERE
			member_no = #{memberNo}
		  AND music_no = #{musicNo}
	</delete>
	
	<select id="selectPlayListDate" parameterType="hashMap" resultMap="playCount">
		SELECT
		    music_no
		  , rank_count
		FROM
		    TH_MS_RANK
		WHERE
		    TO_CHAR(rank_date, 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD')
			  AND music_no IN
		<foreach collection="list" item="item" open="(" close=")" separator=", ">
			  #{item.music_no}
		</foreach>
	</select>
	
	<update id="updatePlayCount" parameterType="hashMap">
		<foreach collection="list" item="item" separator=";" open="DECLARE BEGIN" close="; END;">
			UPDATE TH_MS_RANK
			SET rank_count = rank_count + 1
			  , rank_gender_female = rank_gender_female + 1
			  , rank_age_20 = rank_age_20 + 1
			WHERE music_no = #{item.music_no}
			  AND TO_CHAR(rank_date, 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD')
		</foreach>
	</update>
	
	<insert id="insertPlayCount" parameterType="hashMap">
		INSERT
		INTO TH_MS_RANK
		    (RANK_NO
		  , MUSIC_NO
		  , RANK_DATE
		  , RANK_COUNT
		  , RANK_GENDER_MALE
		  , RANK_GENDER_FEMALE
		  , RANK_AGE_10
		  , RANK_AGE_20
		  , RANK_AGE_30
		  , RANK_AGE_40
		  , RANK_AGE_50)
		SELECT
		    SEQ_MS_RANK.NEXTVAL
		  , T1.*
		FROM(
		<foreach collection="list" item="item" separator="UNION ALL ">
			SELECT
				#{item.music_no} MUSIC_NO
		      , SYSDATE RANK_DATE
			  , 1 RANK_COUNT
			  , 0 RANK_GENDER_MALE
			  , 1 RANK_GENDER_FEMALE
			  , 0 RANK_AGE_10
			  , 1 RANK_AGE_20
			  , 0 RANK_AGE_30
			  , 0 RANK_AGE_40
			  , 0 RANK_AGE_50
		    FROM DUAL
		</foreach>
		) T1
	</insert>
	
</mapper>